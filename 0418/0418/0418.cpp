// 0418.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

// C언어 스타일의 구조체 선언
typedef struct stat     // typedef A B
{
    // asdf 값을 조정하기 위한 주요 변수(0~255)
    int x;
    // bbc 방송국 번호로 (000)
    int y;
    // 도적단 ID(0000)
    int k;
}
/// A
STAT, *PSTAT
/// B
;

int main()
{
    STAT a;         /// int a;
    STAT* p1;       /// int *p1;
    PSTAT p2;       /// int *p2;
    p2 = &a;        /// p2 = &a;
    p2->k = 4;
    p2->x = 5;

    /// 구조체 : 서로 다른 자료형을 갖는 변수를 한꺼번에 선언하고, 사용하는 자료형
    /// 선언 : 예약어 구조체대표이름{ 변수선언1; 변수선언2; ... };
    ///        struct asdf{ int x; int y; int z; };
    /// 사용 : 예약어 구조체대표이름(자료형) 구조체변수이름;
    ///        struct asdf a;       // C 스타일
    ///        asdf b;              // C++ 스타일
    /// 멤버접근 : b.x ==> 구조체 내부의 x 변수를 일반 변수처럼 가리킨다.
    ///     . 연산자 : 직접 멤버 연산자라 한다.
    ///     -> 연산자 : 간접 멤버 연산자라 한다.
    struct asdf { int x; char y; float c; };
    int x;
    struct asdf a;
    a.x = 8;



    /// 배열 : 동일한 자료형을 갖는 변수를 한꺼번에 선언하고, 사용하는 자료형
    /// 선언 : 자료형 배열이름[ 첨자/인덱스/요소의 수 ];
    ///         int a[ 3 ];
    ///         ==> 자료형은 int 형이다.
    ///         ==> 첨자의 범위는 0 ~ 2(N-1)
    ///         a[ 2 ] == *a + 2 ==> *a 계산 후 + 2
    ///         a[ 2 ] == *(a + 2) ==> 포인터 이동 후 값을 반환
    ///         array[ N ] == *( array + N )

#ifdef EX_2
    int arr[3] = { 1, 2, 3 };
    int* p = arr;
    //arr = p;        // 배열이름은 주소/포인터 상수
    //int arr1[3] = { 0, };
    printf("%d %d %d\n", arr[0], arr[1], arr[2]);
    p[0] = 987;         // 포인터로 배열 문법
    *(p + 1) = 888;     // 포인터 문법
    arr[2] = 777;       // 배열 문법
    *(arr + 2) = 567;   // 배열로 포인터 문법
    printf("%d %d %d\n", arr[0], arr[1], arr[2]);
#endif

#ifdef EX_1

    /// 레퍼런스 : 포인터와 동일한 동작을 수행하도록 구성
    ///     - 사용법 : 일반변수와 동일하게 사용
    ///     - 선언하는 시점에 레퍼런스로 선언(&)만!
    ///     - 반드시 선언할 때, 참조할 변수를 대입해야 함!
    int a = 10;     // 일반변수 선언
    int &ra = a;    // 레퍼런스 변수 선언
    //int& rb;              // 초기화 없이 선언 불가능!
    //int& rb = 0;          // 상수 값 선언 불가능!
    //int& rb = nullptr;    // 포인터의 NULL 입력으로 초기화 불가능!
    int r = a;      // 일반변수 선언 = a의 값을 갖는

    ra = 88;    // a 변수의 주소의 값을 변경
    a = 99;     // a 변수의 값을 직접 변경
    r = 77;     // 별도 변수의 값을 변경
    printf("A[ %d ] RA[ %d ] R[ %d ]\n", a, ra, r);

    std::cout << "Hello World!\n";
#endif
}
