// 0404.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
using namespace std;

int main()
{
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < i + 1; j++)
        {
            printf("*");
        }
        printf("\n");
    }


    /// for( ) { 한문장; 한문장; }
    /// for( 초기식(1); 조건식(2); 증감/제어(3) ) { 반복 내용; (4) }
    /// 1 -> 2 -> 4 -> 3 -> 2 -> 4 -> 3 -> 2 -> 4 -> ...
    /// for : 정확한 횟수만큼 반복할 때 가장 유효함.
    /// 
    /// 초기식(1)
    /// while( 조건식(2) ) { 반복 내용(4); 증감/제어(3) }
    /// 1 -> 2 -> 4 -> 3 -> 2 -> 4 -> 3 -> ...
    /// 
    /// 초기식(1)
    /// do { 반복 내용(4); 증감/제어(3) } while( 조건식(2) );
    /// 
    /// 무한반복
    /// 1. for ( ; ; ) : 초기, 조건, 증감/제어식 생략 가능
    /// 2. while( 1 )
    /// 3. do ~ while( 1 ) ; 

    int a = 1;
    int b = 1;
    int c = 0;
    int d = 1;
    int e = 1;

    do          /// 예약어 : 반복문의 시작 위치를 알리는 주소 또는 라벨
    {
        if (a != 1)
            break;
        if (b != 1)
            break;
        if (c != 1)
        {
            printf("C 조건이 만족하질 않는다.  ");
            break;
        }
        if (d != 1)
            break;
        if (e != 1)
            break;
        // 도착 ==> 모든 조건을 만족했다.
        printf("옛다 전설 퀘스트\n");
        return 0;
    } while (0);

    printf("너는 아직 준비가 안됐다.\n");

    // C++ 에서는 어디서나 변수 선언이 가능! 하지만! 절대 아무곳에서나 변수선언 금지!!!!!
    int sum = 0;
    int i;
    for (i = 0; i < 11; i++)
        sum += i;

    for (int i = 4; i < 10; i++)        // 2, 3
    {
        for (int j = 1; j < 10; j++)    // 1, 2, ..., 9, 10
        {
            printf("%d * %d = %d\n", i, j, i * j);
        }
    }

    /// break가 반복문에서 사용될 경우, 가장 가까운 반복문을 빠져나간다.
    /// continue는 가장 가까운 반복문의 증감식 위치로 이동한다.

    /// C언어의 문장 구조
    /// 예약어(   ) 문장;    --> 바로 뒤의 한 문장에게만 예약어가 관리
    /// if(조건) { 참 } else { 거짓 }
    
    int x = 1;

    /// switch는 if에 비해 속도도 느리고, 버그 가능성이 높으므로 사용하지 말것!
    switch (x)      /// switch(변수) {    ==  예약어( ) 한문장
    {
    /// case 뒤의 : C언어에서 라벨. 주소
    /// case 상수:
    case 1:     /// if( x == 1 )
        x = x + 1;
        break;  /// switch에서 사용 시, 더 이상 진행하지 말고, switch의 } 위치로 이동
    case 2:     /// if( x == 2 )
        x = x + 2;
        break;
    case 3:     /// if( x == 3 )
        x = x + 3;
        break;
    case 4:     /// if( x == 4 )
        x = x + 4;
        break;
    default:    /// x 값에 해당하는 case가 존재하지 않는 경우. == else
                /// default에서 아무것도 하지 않더라도 반드시 default 구문을 입력
        break;
    }

    std::cout << "Hello World!" << x << endl;
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
//  ==> 실제 프로그램이 동작하는 상태를 정확하게 확인
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴
//  ==> 실제 동작 환경과 관계 없이 프로그램을 접근하도록 VS가 관리하는 상태
//  ==> ~.exe 생성 시, 중간에 디버그를 위한 별도의 코드가 임의 삽입

